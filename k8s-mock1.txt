Deploy nginx application

  kubectl run nginx --image=nginx:alpine 

  kubectl run messaging --image=redis:alpine --labels=app=tier2

Create a K8s NS

  kubectl create namespace jagadeesh

Get nodes in json format
  kubectl get nodes -o json > nodes.json

Create a service messaging-service to expose the messaging application within the cluster on port 6379.
Use imperative commands.

  kubectl expose pod messaging --name messaging-service --port 6379 --target-port 6379

Create deployment with replicas

  kubectl create deployment hr-web-app --image=nginx --replicas=2

Create a static pod

  kubectl run static-busybox --image=busybox -n kube-system --command sleep 1000 --dry-run=client -o yaml > static.yaml 

  copy to /etc/kubernetes/manifests Kube-Scheduler should automatically create the static pod

Create a service type nodePort to existing deployment

  kubectl expose deployment hr-web-app --name hr-web-app-service --type=NodePort --port 8080 --traget-port 8080 --dry-run=client -o yaml > svc.yaml 
  
  Manually add nodePort to the configuraiton under ports section 
  nodePort: 30007
  
Jsonpath syntax to dispaly only osiamges information for all nodes

  kubectl get nodes -o jsonpath='{.items[*].status.nodeInfo.osImage}'
  
Create PV using host path

    cat pv.yaml 
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: pv-analytics
    spec:
      capacity:
        storage: 100Mi
      accessModes:
        - ReadWriteMany
      hostPath:
          path: /pv/data-analytics
    root@controlplane:~# 
